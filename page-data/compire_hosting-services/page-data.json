{"componentChunkName":"component---src-templates-blog-post-js","path":"/compire_hosting-services","result":{"pageContext":{"post":{"mainId":"compire_hosting-services","title":"ホスティングサービスはどこが一番いいの？ フロントエンドQA-PMがNetlify, GithubPages, Firebaseを評価","childConvertHtml":{"convertedHtml":"<p>相変わらず自分の肩書がキモい（死語）事になりますね…<br>プログラマミング業界のマルチタレント、と言えば意図は伝わりそうな気がしました。<br>（厳密に言えば違います）<br>システムの専門家だけど、特定の言語や専門分野としてプログラマーをやっているのではなく、システムのなンでも屋です、としか表現できないのが悩みです。<br><br>さて、今日は何でもやります、のうち速度計測の話を。<br>フロントエンドエンジニアが好きな（いずれ壁にぶち当たるであろう）言葉ですね。<br>JAMStackなブログを作ろうと思っている人は必ず一度は悩むホスティングサーバーをどこにするか問題について、私なりに取り組んだ結果をお話します。<br>この記録は執筆時点のものですので、実際に使われる時には結果が変わっている事が考えられます。</p><h1 id=\"hcb9dacb773\">結論</h1><p>敢えて選ぶとしたらNetlify？<br>ですが、慣れたサービスでいいと思います。</p><h2 id=\"h3e39251a98\">ソースファイル</h2><ul><li><a href=\"[object Object]\">Firebase</a></li><li><a href=\"Gatsby-MicroCMS-GithubPages_Diary\">Github Pages</a></li><li><a href=\"Gatsby-Operation-Nomuraya-Diary\">Netlify</a></li></ul><h2 id=\"h2fe8a1d12a\">速度比較</h2><p><picture><source srcSet=\"https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Firebase.webp?w=117&amp;h=120&amp;fm=webp 117w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Firebase.webp?w=234&amp;h=240&amp;fm=webp 234w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Firebase.webp?w=469&amp;h=480&amp;fm=webp 469w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Firebase.webp?w=938&amp;h=960&amp;fm=webp 938w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Firebase.webp?w=1876&amp;h=1920&amp;fm=webp 1876w\" type=\"image/webp\"><source srcSet=\"https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Firebase.webp?w=117&amp;h=120 117w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Firebase.webp?w=234&amp;h=240 234w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Firebase.webp?w=469&amp;h=480 469w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Firebase.webp?w=938&amp;h=960 938w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Firebase.webp?w=1876&amp;h=1920 1876w\"><img src=\"https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Firebase.webp\" alt=\"\" srcset=\"https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Firebase.webp?w=117&amp;h=120 117w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Firebase.webp?w=234&amp;h=240 234w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Firebase.webp?w=469&amp;h=480 469w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Firebase.webp?w=938&amp;h=960 938w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Firebase.webp?w=1876&amp;h=1920 1876w\" sizes=\"80vw\" loading=\"lazy\"></picture><picture><source srcSet=\"https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/GithubPages.webp?w=110&amp;h=120&amp;fm=webp 110w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/GithubPages.webp?w=220&amp;h=240&amp;fm=webp 220w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/GithubPages.webp?w=440&amp;h=480&amp;fm=webp 440w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/GithubPages.webp?w=880&amp;h=960&amp;fm=webp 880w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/GithubPages.webp?w=1760&amp;h=1920&amp;fm=webp 1760w\" type=\"image/webp\"><source srcSet=\"https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/GithubPages.webp?w=110&amp;h=120 110w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/GithubPages.webp?w=220&amp;h=240 220w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/GithubPages.webp?w=440&amp;h=480 440w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/GithubPages.webp?w=880&amp;h=960 880w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/GithubPages.webp?w=1760&amp;h=1920 1760w\"><img src=\"https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/GithubPages.webp\" alt=\"\" srcset=\"https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/GithubPages.webp?w=110&amp;h=120 110w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/GithubPages.webp?w=220&amp;h=240 220w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/GithubPages.webp?w=440&amp;h=480 440w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/GithubPages.webp?w=880&amp;h=960 880w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/GithubPages.webp?w=1760&amp;h=1920 1760w\" sizes=\"80vw\" loading=\"lazy\"></picture><picture><source srcSet=\"https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Netlify.webp?w=133&amp;h=120&amp;fm=webp 133w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Netlify.webp?w=267&amp;h=240&amp;fm=webp 267w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Netlify.webp?w=535&amp;h=480&amp;fm=webp 535w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Netlify.webp?w=1070&amp;h=960&amp;fm=webp 1070w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Netlify.webp?w=2140&amp;h=1920&amp;fm=webp 2140w\" type=\"image/webp\"><source srcSet=\"https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Netlify.webp?w=133&amp;h=120 133w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Netlify.webp?w=267&amp;h=240 267w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Netlify.webp?w=535&amp;h=480 535w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Netlify.webp?w=1070&amp;h=960 1070w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Netlify.webp?w=2140&amp;h=1920 2140w\"><img src=\"https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Netlify.webp\" alt=\"\" srcset=\"https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Netlify.webp?w=133&amp;h=120 133w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Netlify.webp?w=267&amp;h=240 267w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Netlify.webp?w=535&amp;h=480 535w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Netlify.webp?w=1070&amp;h=960 1070w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/Netlify.webp?w=2140&amp;h=1920 2140w\" sizes=\"80vw\" loading=\"lazy\"></picture><br>Netlifyは遅いとかFirebaseが圧倒的だとか言われますが、実測値では大した違いはないです。<br>イエローゾーン内で65±15を行ったり来たりしてるので、数字はガチャ運です。<br>せっかくだから頑張れるぐらい高い数値を狙って３つ全部で同じ数値になるようガチャを引いたら案外簡単にできたのでパシャりました。</p><h2 id=\"h5fe5785d53\">敢えてNetlifyを推す理由</h2><p>MicroCMSでWebhookを設定する時に明示的に指定ができるからです。<br><picture><source srcSet=\"https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/MicroCMS%20Webhook%E8%A8%AD%E5%AE%9A.webp?w=160&amp;h=68&amp;fm=webp 160w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/MicroCMS%20Webhook%E8%A8%AD%E5%AE%9A.webp?w=320&amp;h=137&amp;fm=webp 320w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/MicroCMS%20Webhook%E8%A8%AD%E5%AE%9A.webp?w=640&amp;h=275&amp;fm=webp 640w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/MicroCMS%20Webhook%E8%A8%AD%E5%AE%9A.webp?w=1280&amp;h=550&amp;fm=webp 1280w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/MicroCMS%20Webhook%E8%A8%AD%E5%AE%9A.webp?w=2560&amp;h=1100&amp;fm=webp 2560w\" type=\"image/webp\"><source srcSet=\"https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/MicroCMS%20Webhook%E8%A8%AD%E5%AE%9A.webp?w=160&amp;h=68 160w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/MicroCMS%20Webhook%E8%A8%AD%E5%AE%9A.webp?w=320&amp;h=137 320w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/MicroCMS%20Webhook%E8%A8%AD%E5%AE%9A.webp?w=640&amp;h=275 640w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/MicroCMS%20Webhook%E8%A8%AD%E5%AE%9A.webp?w=1280&amp;h=550 1280w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/MicroCMS%20Webhook%E8%A8%AD%E5%AE%9A.webp?w=2560&amp;h=1100 2560w\"><img src=\"https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/MicroCMS%20Webhook%E8%A8%AD%E5%AE%9A.webp\" alt=\"\" srcset=\"https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/MicroCMS%20Webhook%E8%A8%AD%E5%AE%9A.webp?w=160&amp;h=68 160w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/MicroCMS%20Webhook%E8%A8%AD%E5%AE%9A.webp?w=320&amp;h=137 320w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/MicroCMS%20Webhook%E8%A8%AD%E5%AE%9A.webp?w=640&amp;h=275 640w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/MicroCMS%20Webhook%E8%A8%AD%E5%AE%9A.webp?w=1280&amp;h=550 1280w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/MicroCMS%20Webhook%E8%A8%AD%E5%AE%9A.webp?w=2560&amp;h=1100 2560w\" sizes=\"80vw\" loading=\"lazy\"></picture><br>Webhookを指定することで、記事を更新するたびに新着記事を各ホスティングサービスに通知する事ができます。<br>これがあると、WordPressと同じような感覚でブログの更新ができるようになる（当然、更新も表示も爆速を維持したまま）ので、<br>「静的サイト？WordPress？何が違うの？」みたいな状況にできるわけです。とても素晴らしい！<br>ここを見ている人でJAMStackが分からない人なんていないと思って話してますが、要はWordPressみたいな動的サイトでやってくれてたアレコレを静的サイトでも同じような感覚で使うのは結構骨が折れるものです。<br>裏で色々と頑張ってくれているサービスに感謝しましょう。<br><br>IT人事・採用担当さんに向けて意訳すると「ReactフレームワークをAPI連携して出来たサイトをGithubにCIツール使ってWordPressよりも早くて使いやすいアプリ作りました」と言えるようになります。<br>脱・メルカリクローンではなく、メルカリクローンをJAMStackで作れば、今なら評価も高いんじゃないでしょうか？<br>私の感覚ですが、データベースのメンテナンスコストも考えるとAPIを叩いて取ってきたデータをいい感じに使えるようにサービスを構築する方がモダンな気がします。<br>インターネット老人おじさんなのに若者アピールに余念がないです。褒めてください。</p><h2 id=\"h893ded46e8\">GithubPagesのいいところ</h2><p>普段Gitを使い慣れている人にとって最も教育コストが低い事が挙げられます。<br><br>ローカルで<code>gatsby build</code> してpublicを公開用リポジトリにpushすればページを公開できるので、難しそうな事は考えなくていいのが強みです。<br>GithubPagesをdocsディレクトリに指定してpublic-&gt;docsにリネームして丸ごとアップすればソース管理もできます。<br>ただし、無料プランだとプライベートリポジトリでGithubPagesを公開できないので、公開用のリポジトリとソース管理用のリポジトリを分ける等の工夫が必要です。<br>たとえば、developリポジトリにソースコードをおいて、<code>gatsby build</code>で生成したpublicディレクトをopenリポジトリに置く事でAPIキーを秘匿できるのでセキュリティ面でも安心です。</p><h2 id=\"h7ecff0c163\">Firebaseのいいところ</h2><p>GithubPagesのようにリポジトリで分けず、サービスで分けたのがFirebaseやNetlifyのイメージです。<br>FirebaseはGoogleが作った、と一言だけ言えばアフィリエイターなら全員納得してくれますよね？<br>他のサービスよりGoogleアナリティクスやGoogleアドセンスといった、めちゃくちゃ重いスクリプトが最も最適化された状態で使用する事ができるのです。<br>元々はホスティングサービスではなくBaasとして使えるサービスだったので、その機能の一つにホスティングがある、という位置づけです。<br>今回使ったのもFirebaseホスティングだけですが、Firebaseは他にも機能が豊富にあるのでエンジニアとしてスキルアップしたいなら使ってみるのも悪くないでしょう。</p><h2 id=\"h4a88b00160\">技術要件</h2><p>なるほど、こりゃいい！となってくる頃だと思うので、就職活動のポートフォリオにしようと考えもよぎるかと思いますので、この辺りで一応心を折っておく事にします。<br>今回の要件を実装するために必要なエンジニアリングスキルは、</p><ul><li>サイト作成のためのReactスキル：Reactである必要はありませんが、今回はReactを採用しています<ul><li>フロントエンド、特に表示制御に集中できます</li><li>バックエンド、今回は<code>Gatsby-config.js</code>  や<code>Gatsby-code.js</code>  辺りが該当します。ここだけで完結できます。</li></ul></li><li>API構築：今回はMicroCMSに丸投げしているので繋ぎの部分とMicroCMSの仕様だけ知っておけばいいです</li><li>ライティングスキル：記事を書く、というのは実は結構度胸が要ります。発信しようと思っている人が多いので軽視されがちですが、書けない人は本当に書けないです。</li><li>Githubを使うためのGitコマンド：プロジェクトによってはGitの運用プラクティスも求められます</li><li>静的サイトの使い方：GithubPagesとかFirebaseとかNetlifyなど、今回のメインテーマです</li><li>ページを更新したら画面に反映する仕組み：これがビルドです。次のページでより詳細に解説します。</li></ul><p>ざっくりいうと</p><ul><li>J: Javascript／ReactやらVueやら</li><li>A: API／</li><li>M: Markup</li></ul><p>Stackは一語で「つながり・積み重ね」です。</p><h2 id=\"h443c4747fc\">記事を更新しても反映されない</h2><p>次の問題です。<br>MicroCMSを更新してもサイトに新しい記事は反映されません。<br>これを反映させるためにビルドを行う必要があります。<br>手動で行うなら、</p><ol><li>記事を更新</li><li><code>gatsby build</code> </li><li>デプロイコマンドを実施<ol><li>（GithubPagesのみ）publicディレクトリをpushする</li></ol></li></ol><p>とはいえ、記事を更新するたびにビルドしてデプロイするのは面倒です。<br>これを簡略化・自動化する仕組みがCMS側に必要です。<br>GithubPagesの場合も同様です。<br></p>"},"tags":["GatsbyJS","考察"],"description":"相変わらず自分の肩書がキモい（死語）事になりますね…プログラマミング業界のマルチタレント、と言えば意図は伝わりそうな気がしました。（厳密に言えば違います）システムの専門家だけど、特定の言語や専門分野としてプログラマーをやっているのではなく、...","door":{"url":"https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/%E3%82%AB%E3%82%99%E3%83%81%E3%83%A3.webp"},"prev":"complate_v1","next":"autobuild","updatedAt":"2021年01月20日 03時06分68秒","publishedAt":"2021年01月20日 03時06分68秒"},"prev":{"mainId":"complate_v1","title":"Gatsby+MicroCMS+Netlifyで遅かったアレコレを徹底検証！軽量化・高速化のためにやったこと全部話します","childConvertHtml":{"convertedHtml":"<p>Gatsbyに入門して一週間で出来たサイトですが、なかなかサマになったなぁ、と自己満足してます。<br>クオリティやアプローチはまだまだレガシーなんですが、サイトのタイトルの通り「インターネット老人おじさん」としているので、あんまりモダンなレイアウトにできなかった。<br>名前負けしました。<br></p><h2 id=\"h89c8822514\">タイトルが悪いのか？</h2><p>私だって本当はタイトルみたいなデザインとか作りたいんですが「○○ってBootstrapじゃね？」というよくわからない反骨心で採用しようとしない傾向にあります。<br>おかげで流行だけではなく思想までインターネット老人と化したわけですが、とりあえずベースになるブログはここまで出来たし、後は（高速化とか軽量化も）どこまで行っても趣味の世界だし、これ以上やりようがないので諦めます。<br>ぶっちゃけ<strong>MicroCMSを捨てたら爆速は維持できます</strong> し、こんなに苦労しなかったはずです。<br><a href=\"https://github.com/shimajima-eiji/Hosting/tree/Gatsby-Operaion-Nomuraya-Diary#%E3%81%AA%E3%81%9Cgatsby-transform-remark%E3%82%92%E6%8E%A1%E7%94%A8%E3%81%97%E3%81%AA%E3%81%84%E3%81%AE%E3%81%8B\" target=\"_blank\" rel=\"noopener noreferrer\">Githubリポジトリ</a> （そのうちブログに移行します）でも言及していますが、</p><ul><li>どこからでも</li><li>PCでもスマホでも</li><li>記事を書いたら即反映</li></ul><p>これを捻じ曲げると、昔運営していたGithubPages+Jekyllサイトのように非常にイラつかされる事になっていました。<br>GithubPagesを捨てたのも、ビルドが遅すぎて記事の修正確認がプレビューできなかった事にあります。<br></p><h2 id=\"h7d764a6d79\">静的サイトを運営した事があるから分かる、MocroCMSの良さ</h2><p>MicroCMSは画面プレビュー機能があるため、記事を更新してビルドするまで画面で確認ができない、という煩わしさを捨て去る事ができるのです。<br>これは、GatsbyJSのデフォルト機能ではできない事なので、とても捨てられません。<br>microCMSで書いてプレビューして、実際はGatsbyJSにマークダウンで置く手もなくはないですが、それだと二重管理になりますし、手間がかかります。<br>きっと途中で飽きて廃止するだろうな、という未来が今の時点で見えました。<br>おそらく他のCMSでも画面プレビュー機能はあると思いますが、私が知らないのと、探して比較しようとは思いません。<br>そう思うぐらいMicroCMSで満足しているのです。<br></p><h1 id=\"hfe212d43ad\">外部CMSを使いつつ、速度を改善する</h1><p>さて、本題です。<br>概要をざっくり言えば、</p><ul><li>Webフォントを諦める</li><li>画像はGatsbyJSと同じWebサーバーに置く</li><li>画像は.webp形式に変換する</li><li>GatsbyJSのプラグイン拡張だけ使う</li></ul><p>です。<br>一つずつ解説していきます。</p><h2 id=\"h3a2d3a6058\">Webフォントを諦める</h2><p>Webフォントという表現をすると、「サーバーに置けばよくね？」みたいな話を始める人もいますが、そういうい問題ではありません。<br>まずはゆっくり読み進めてみてください。<br><br>このブログでは、遅延読み込みを採用しているのでレイアウト崩れは起こりますが使えないわけではありません。<br>とはいえ、読み込み自体が遅いという問題に目を背けただけなので本質的な解決には至りません。<br>デザイナーズサイトでもない限り、フォントにこだわりすぎるのはよくありません。<br>色々試行錯誤して納得のデザインを見つけた頃には、速度チェッカーに掛けて鈍足だった、なんて事になると目も当てられません。<br>そもそも、フォントはすべての文字に対応しているわけではありませんので、内容によっては漢字がダメ、英数字がダメ、日本語がダメなど使用上の注意点もあります。<br>凝った表現を取り入れて差別化したい気持ちは（このブログでWebフォントを採用しているので）非常によく分かりますが、知識がない状態で実践するのは危険すぎる領域です。<br>サイトが遅いと思ったらスクリプトよりフォントを疑いましょう。</p><h2 id=\"h821d735fab\">画像を次世代の規格（私はwebpを選択）形式にする</h2><p>これはチェッカーに掛けて初めて知りました。<br>webp以外にも似たようなアプローチをしているものとして、JPG2000とかJPEG-XRとか色々な規格がありますので、どれが良いかは比較しないとなんとも言えませんが、手元の画像を変換した感じではどれも対して違いが分かりませんでした。<br>MicroCMSにサイズを最適化した状態のwebpを保存しておき、GatsbyJSで再度変換して全ブラウザで表示できるようにしていますが、ぶっちゃけこれをやる意味ある？ぐらいに思っています。<br>理屈的にはビルド時にやった方が表示が最適化されているらしいです（タグが変わったのは分かりましたが、具体的にどう良くなったか説明できないので「らしい」としました）が、場合によっては容量が増えたりしているのでこの辺りはまだ考えた方が良さそうです。<br>Gatsbyが公式で次世代規格に対応できるようなら検討の余地はあります。<br>なお、MicroCMSは対応しています。この記事の画像もwebpですがGatsbyで変換してjpgやらpngになっていますのでブラウザから確認できませんね…。<br></p><h2 id=\"h4f7172e4ff\">GatsbyJSのプラグインを使う</h2><p>GatsbyはReactがベースなのでReactで使えるものはGatsbyでも使えるんですが、使えるのと使いやすいのはまた別の話です。<br>使いやすいからいいケースもあれば、使いやすくても最適ではない事もあります。<br>ひどいときには「動くけど…う〜ん」みたいなものもありました。<br>GatsbyやReactプラグインのバージョンが上がったら互換性がなくなる、なんてケースもなくはないだろうなので、しっかりと公式サポート（動作検証的な意味で）されているものを使ったほうが安心です。<br>Reactプレーンで完全に独立しているならまた話は変わりますが、どちらにせよ判断がややこしくなるケースが想定されるなら注意するしかないです。<br><br>なお、プラグインを入れすぎて重くならないか検証したのですが、私の触った感じだとプラグインのせいで重くなるということはなかったです。<br>公式でも遅かったものだと、Google Adsenseのようにクライアントサイドのスクリプトを実行している、という事がない限りは気にしなくて良いと思います。</p><h1 id=\"h4d9fb6fdd3\">GatsbyJSで作ったサイトブログをいつまでも爆速で保つために</h1><p>フォントや画像を最適化しつづける限りは大丈夫だと考えてよさそうです。<br>プラグインやスクリプトのダイエットも必要ないでしょう。<br>最初のうちは良かったけど使い続けていくうちに重くなる、というケースにはページネーションなどで負荷を分割する方法が考えられます。<br>サイト内検索もアルゴリズム次第では高速化できるはずです。<br>レコメンド機能も品質に拘らなければ実装はシンプルにできます。<br>要は使い方の問題と思って良いでしょう。<br>サイトの保守契約が必要なケースは少ないんじゃないでしょうか。<br>年に一回、長くて一週間程度でメンテナンスの相談時間を都合する事も可能ですので、静的サイトを検討中もしくは運用中の方の相談に対応できます。<br>個人でも歓迎しますので、お気軽にLINEで友達登録＋メッセージを送ってください。</p>"},"tags":["ブログについて","GatsbyJS"],"description":"Gatsbyに入門して一週間で出来たサイトですが、なかなかサマになったなぁ、と自己満足してます。クオリティやアプローチはまだまだレガシーなんですが、サイトのタイトルの通り「インターネット老人おじさん」としているので、あんまりモダンなレイアウ...","door":{"url":"https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B7%E3%82%99.webp"},"prev":null,"next":"compire_hosting-services","updatedAt":"2021年01月17日 09時09分31秒","publishedAt":"2021年01月16日 17時12分16秒"},"next":{"mainId":"autobuild","title":"MicroCMSを使ったJAMStackなサイトで記事を書くたびに自動更新させたいならCIツールを使おう！（GithubAction編）","childConvertHtml":{"convertedHtml":"<h1 id=\"h3301096c4c\">JAMStackなサイトはWordPressの恩恵をすべて捨てるという選択</h1><p>前回の記事まで爆速サイトについて言及しましたが、改めてJAMStackなサイトを作る事とは、動的サイトの恩恵を捨てるという決断である事を再度意識しましょう。<br>たとえば、</p><ul><li>記事を書いたら自動的にアップロードされる</li><li>ブログ内検索ができる</li><li>前のページ、次のページなどナビゲーションリンク</li><li>記事のタイトルとページタイトルを一致させる</li></ul><p>といったケースが考えられます。<br>アフィリエイターにとっては一番最後など致命的以外の何物でもないです。<br>その他細かいものは多くありますが、インパクトの大きいものはこの辺りでしょうか。</p><h2 id=\"h32f741980e\">復習：内部マークダウンと外部CMS</h2><p>内部マークダウンはいわゆるMarkdownファイルです。外部CMSは今回の場合、MicroCMSを指します。<br>MicroCMSについてはお話した通りですが、ここではGithubのようなWebサービスを使うメリットに注目しましょう。<br>MicroCMSのポイントは</p><ul><li>どこからでも</li><li>PCでもスマホでも</li><li>記事を書いたら即反映</li></ul><p>です。<br>実はこの要件を満たすだけなら、Githubにさえ繋げれば記事を更新できます。<br>かつ、MicroCMSと違うのは、<strong>GatsbyJSのプラグインをフルスペック</strong>に使えるということです。<br>前回の記事で「MicroCMSを使いたい理由に</p><ul><li>画面プレビューができる<ul><li>ビルドをしなくても記事を確認できる</li></ul></li><li>どこからでも記事が書ける（重複ですね）</li></ul><p>を上げていました。<br>そして、デメリットとして<code>gatsby-transform-remark</code> が使えない事を上げています。<br>gatsby-transform-remarkはマークダウンを強力にサポートするプラグインで、Gatsbyの良さの半分はこれのおかげだと言ってもいいです。<br>MicroCMS推しの私ですら羨望の眼差しで見ています。<br><br>前回ウェブフォントが遅いという話をしましたが、この問題も解決するでしょう。<br>本当の意味で速度を追求するなら、ベストはホスティングサービス議論よりデータソースをローカルに持たせて制御する以上の事はないですが、マークダウンは癖が強いのでエンジニアやライター以外にはとっつきにくい印象を与えてしまうでしょう。<br>MicroCMSではリッチテキストエディタがあるので、従来のブログライターにも扱いやすいというメリットがあります（私はマークダウンで変換しているので特にありません…）<br>Githubと言い続けていますが、GitLabでも同じことが出来ます。</p><h2 id=\"hcad30e4a70\">記事を書いても更新されない</h2><p>当たり前ですが、JAMStack構成では記事を書いても即反映されません。<br>動的にページが生成されるWordPressと違って、静的なページは新しいページを自分で作る必要がある、という事です。<br>つまり、記事を書いたら再度ビルドする必要があります。<br><br>とはいえ、記事を更新するたびにビルドをするのは面倒です。<br>ビルドを自動化して最新のページを反映させるための仕組みを作るのがCIツールの存在です。</p><h3 id=\"h9ff6a85ae5\">CIツールとは</h3><p>Continuous Integration：継続的インテグレーションと呼ぶ事が多いですが、ここではGithubにpushしたり記事を更新したら自動でビルドしてくれるステキな仕組み、という認識で良いです。<br>CIツールも色々ありますが、今回はGithubActionを使います。</p><h2 id=\"h4019f5ecd1\">GithubActionを使う</h2><p><a href=\"https://docs.github.com/ja/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions\" target=\"_blank\" rel=\"noopener noreferrer\">公式の解説サイト</a> で全部書いているんですが、情報が多すぎるので必要なものだけ抽出します。<br>Gatsbyなどで作ったプロジェクトのルートディレクトリで<code>.github/workflows/○○.yml</code>  でファイルを作ります。<br>ファイル名は何でも良いです。<br>これがGithubActionで実行されるワークフローです。<br><a href=\"https://github.com/shimajima-eiji/Gatsby-MicroCMS-Firebase_Diary/blob/main/.github/workflows/firebase-hosting-merge.yml\" target=\"_blank\" rel=\"noopener noreferrer\">全文</a><br>ここではピンポイントに解説します。</p><h3 id=\"h12a8b44390\">動作条件を指定する：ON句</h3><pre><code class=\"hljs\"><span class=\"hljs-built_in\">name</span>: Deploy <span class=\"hljs-keyword\">to</span> Firebase Hosting <span class=\"hljs-keyword\">on</span> merge\n\t<span class=\"hljs-keyword\">on</span>:\n\t  push:\n\t    branches:\n\t      - main\n\t  repository_dispatch:\n          - types: [MicroCMS_update]</code></pre><p><br></p><ul><li>pushをトリガーにするケース<ul><li>サイトレイアウトを変更した際に動いてほしい</li><li>mainブランチをターゲット</li></ul></li><li>MicroCMSをトリガーにするケース<ul><li>記事更新時にビルドしたい</li><li><span style=\"color:#cf3e51\">MicroCMS_update(任意)のタイプを実行</span></li></ul></li></ul><p>ここはMicroCMSの仕様です。<br><a href=\"https://microcms.io/blog/webhook-for-github-actions/\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub ActionsへのWebhook通知に対応しました（MicroCMS公式）</a></p><h3 id=\"h66d1bed60b\">jobs句</h3><pre><code class=\"hljs\"><span class=\"hljs-attribute\">jobs</span>:\n  (name):\n    <span class=\"hljs-attribute\">runs-on</span>: ubuntu-latest\n    <span class=\"hljs-attribute\">steps</span>:\n    - <span class=\"hljs-attribute\">uses</span>: actions/checkout<span class=\"hljs-variable\">@v2</span>\n    - <span class=\"hljs-attribute\">uses</span>: actions/setup-node<span class=\"hljs-variable\">@v1</span>\n    - <span class=\"hljs-attribute\">run</span>: | \n        yarn\n        yarn build\n    - <span class=\"hljs-attribute\">uses</span>: preceiris/actions-gh-pages<span class=\"hljs-variable\">@v3</span>  # Github Pagesで表示させる\n    </code></pre><p>ジョブ名以下に処理体系をひとかたまりでまとめています。</p><ul><li>runs-on: 実行するイメージ</li><li>steps: <ul><li>uses: Githubが公開するアクション。<ul><li>actions/checkoutでこのリポジトリをチェックアウト</li><li>actions/setup-nodeやpeaceiris/actions-gh-pagesもひとまとめにしたコマンド群</li></ul></li><li>run: 実際に実行するコマンド。packages.jsonをnode_modulesを入れるためにnpm/yarn</li></ul></li></ul><p>こう書くと難しいので、</p><pre><code class=\"hljs\"><span class=\"hljs-meta\"># uses: git clone -b (このリポジトリ)</span>\n<span class=\"hljs-meta\"># uses: npmなりyarnをインストール</span>\nyarn  # ここでGatsby-cliが入る\nyarn build  # gatsby buildが呼ばれるはず\n<span class=\"hljs-meta\"># uses: cd public &amp;&amp; git push -b gh-pages</span></code></pre><p><br>runは明示的にコマンドを、usesはコマンドをGithubがいい感じにやってくれるものという認識でいいです。<br>今回は同じ動作を複数の条件で実施したいのでファイル一つで完了できますが、異なる動作をさせる場合は条件ごとにymlファイルを作成しましょう。<br>このように、今回のようにGithubActionのワークフローはymlファイル一つで完結できます。<br><br>動作確認をする場合は、pushを実施するかMicroCMS\bで記事を書けば良いです。<br>なお、MicroCMSのWebhookを実行する場合はGithubトークンを事前に設定しておきましょう。</p><h1 id=\"h222e49d2c8\">復習</h1><p>静的サイトで爆速かつ快適な運営をするためには、</p><ul><li>Javascript: React</li><li>API</li><li>Markup: CMS</li><li>Git<ul><li>Github</li></ul></li><li>CI: GithubAction（今回）</li><li>ホスティングサービス</li></ul><p>の知識が求められます。<br>SEOはもちろんのこと、SPAやPWAはまた別の知識ですが、将来的には必要になります。</p>"},"tags":["GatsbyJS"],"description":"JAMStackなサイトはWordPressの恩恵をすべて捨てるという選択前回の記事まで爆速サイトについて言及しましたが、改めてJAMStackなサイトを作る事とは、動的サイトの恩恵を捨てるという決断である事を再度意識しましょう。たとえば、...","door":null,"prev":"compire_hosting-services","next":null,"updatedAt":"2021年01月20日 05時32分05秒","publishedAt":"2021年01月20日 05時32分05秒"},"site":{"title":"インターネット老人おぢさん","siteUrl":"https://speedtest-netlify.netlify.app"}}},"staticQueryHashes":["3156519155","370162261"]}