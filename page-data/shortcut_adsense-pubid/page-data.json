{"componentChunkName":"component---src-templates-blog-post-js","path":"/shortcut_adsense-pubid","result":{"pageContext":{"post":{"mainId":"shortcut_adsense-pubid","title":"[Google Adsense] サイト運営者ID(PUB-ID)を確認する(pub-XXXXXXXXXXXXXXXX)","childConvertHtml":{"convertedHtml":"<p><a href=\"https://support.google.com/adsense/answer/6376922\" target=\"_blank\" rel=\"noopener noreferrer\">https://support.google.com/adsense/answer/6376922</a><br>あるいは、<a href=\"https://www.google.com/intl/ja_jp/adsense/start/\" target=\"_blank\" rel=\"noopener noreferrer\">GoogleAdsenseのログインページ</a> でログインした後のURL欄に<code>/pub-XXXXXXXXXXXXXXXX/</code>  のようなパスが見つかるので、これがID。<br>なお、サイトに貼り付けるスクリプトタグも</p><pre><code class=\"hljs\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">data-ad-client</span>=<span class=\"hljs-string\">\"ca-pub-XXXXXXXXXXXXXXXX\"</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span></code></pre><p>のように共通。</p>"},"tags":[],"description":"https://support.google.com/adsense/answer/6376922あるいは、GoogleAdsenseのログインページ でログインした後のURL欄に/pub-XXXXXXXXXXXXXXXX/  のようなパス...","door":null,"prev":null,"next":null,"updatedAt":"2021年01月20日 11時10分81秒","publishedAt":"2021年01月20日 11時10分81秒"},"prev":{"mainId":"autobuild","title":"MicroCMSを使ったJAMStackなサイトで記事を書くたびに自動更新させたいならCIツールを使おう！（GithubAction編）","childConvertHtml":{"convertedHtml":"<h1 id=\"h3301096c4c\">JAMStackなサイトはWordPressの恩恵をすべて捨てるという選択</h1><p>前回の記事まで爆速サイトについて言及しましたが、改めてJAMStackなサイトを作る事とは、動的サイトの恩恵を捨てるという決断である事を再度意識しましょう。<br>たとえば、</p><ul><li>記事を書いたら自動的にアップロードされる</li><li>ブログ内検索ができる</li><li>前のページ、次のページなどナビゲーションリンク</li><li>記事のタイトルとページタイトルを一致させる</li></ul><p>といったケースが考えられます。<br>アフィリエイターにとっては一番最後など致命的以外の何物でもないです。<br>その他細かいものは多くありますが、インパクトの大きいものはこの辺りでしょうか。</p><h2 id=\"h32f741980e\">復習：内部マークダウンと外部CMS</h2><p>内部マークダウンはいわゆるMarkdownファイルです。外部CMSは今回の場合、MicroCMSを指します。<br>MicroCMSについてはお話した通りですが、ここではGithubのようなWebサービスを使うメリットに注目しましょう。<br>MicroCMSのポイントは</p><ul><li>どこからでも</li><li>PCでもスマホでも</li><li>記事を書いたら即反映</li></ul><p>です。<br>実はこの要件を満たすだけなら、Githubにさえ繋げれば記事を更新できます。<br>かつ、MicroCMSと違うのは、<strong>GatsbyJSのプラグインをフルスペック</strong>に使えるということです。<br>前回の記事で「MicroCMSを使いたい理由に</p><ul><li>画面プレビューができる<ul><li>ビルドをしなくても記事を確認できる</li></ul></li><li>どこからでも記事が書ける（重複ですね）</li></ul><p>を上げていました。<br>そして、デメリットとして<code>gatsby-transform-remark</code> が使えない事を上げています。<br>gatsby-transform-remarkはマークダウンを強力にサポートするプラグインで、Gatsbyの良さの半分はこれのおかげだと言ってもいいです。<br>MicroCMS推しの私ですら羨望の眼差しで見ています。<br><br>前回ウェブフォントが遅いという話をしましたが、この問題も解決するでしょう。<br>本当の意味で速度を追求するなら、ベストはホスティングサービス議論よりデータソースをローカルに持たせて制御する以上の事はないですが、マークダウンは癖が強いのでエンジニアやライター以外にはとっつきにくい印象を与えてしまうでしょう。<br>MicroCMSではリッチテキストエディタがあるので、従来のブログライターにも扱いやすいというメリットがあります（私はマークダウンで変換しているので特にありません…）<br>Githubと言い続けていますが、GitLabでも同じことが出来ます。</p><h2 id=\"hcad30e4a70\">記事を書いても更新されない</h2><p>当たり前ですが、JAMStack構成では記事を書いても即反映されません。<br>動的にページが生成されるWordPressと違って、静的なページは新しいページを自分で作る必要がある、という事です。<br>つまり、記事を書いたら再度ビルドする必要があります。<br><br>とはいえ、記事を更新するたびにビルドをするのは面倒です。<br>ビルドを自動化して最新のページを反映させるための仕組みを作るのがCIツールの存在です。</p><h3 id=\"h9ff6a85ae5\">CIツールとは</h3><p>Continuous Integration：継続的インテグレーションと呼ぶ事が多いですが、ここではGithubにpushしたり記事を更新したら自動でビルドしてくれるステキな仕組み、という認識で良いです。<br>CIツールも色々ありますが、今回はGithubActionを使います。</p><h2 id=\"h4019f5ecd1\">GithubActionを使う</h2><p><a href=\"https://docs.github.com/ja/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions\" target=\"_blank\" rel=\"noopener noreferrer\">公式の解説サイト</a> で全部書いているんですが、情報が多すぎるので必要なものだけ抽出します。<br>Gatsbyなどで作ったプロジェクトのルートディレクトリで<code>.github/workflows/○○.yml</code>  でファイルを作ります。<br>ファイル名は何でも良いです。<br>これがGithubActionで実行されるワークフローです。<br><a href=\"https://github.com/shimajima-eiji/Gatsby-MicroCMS-Firebase_Diary/blob/main/.github/workflows/firebase-hosting-merge.yml\" target=\"_blank\" rel=\"noopener noreferrer\">全文</a><br>ここではピンポイントに解説します。</p><h3 id=\"h12a8b44390\">動作条件を指定する：ON句</h3><pre><code class=\"hljs\"><span class=\"hljs-built_in\">name</span>: Deploy <span class=\"hljs-keyword\">to</span> Firebase Hosting <span class=\"hljs-keyword\">on</span> merge\n\t<span class=\"hljs-keyword\">on</span>:\n\t  push:\n\t    branches:\n\t      - main\n\t  repository_dispatch:\n          - types: [MicroCMS_update]</code></pre><p><br></p><ul><li>pushをトリガーにするケース<ul><li>サイトレイアウトを変更した際に動いてほしい</li><li>mainブランチをターゲット</li></ul></li><li>MicroCMSをトリガーにするケース<ul><li>記事更新時にビルドしたい</li><li><span style=\"color:#cf3e51\">MicroCMS_update(任意)のタイプを実行</span></li></ul></li></ul><p>ここはMicroCMSの仕様です。<br><a href=\"https://microcms.io/blog/webhook-for-github-actions/\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub ActionsへのWebhook通知に対応しました（MicroCMS公式）</a></p><h3 id=\"h66d1bed60b\">jobs句</h3><pre><code class=\"hljs\"><span class=\"hljs-attribute\">jobs</span>:\n  (name):\n    <span class=\"hljs-attribute\">runs-on</span>: ubuntu-latest\n    <span class=\"hljs-attribute\">steps</span>:\n    - <span class=\"hljs-attribute\">uses</span>: actions/checkout<span class=\"hljs-variable\">@v2</span>\n    - <span class=\"hljs-attribute\">uses</span>: actions/setup-node<span class=\"hljs-variable\">@v1</span>\n    - <span class=\"hljs-attribute\">run</span>: | \n        yarn\n        yarn build\n    - <span class=\"hljs-attribute\">uses</span>: preceiris/actions-gh-pages<span class=\"hljs-variable\">@v3</span>  # Github Pagesで表示させる\n    </code></pre><p>ジョブ名以下に処理体系をひとかたまりでまとめています。</p><ul><li>runs-on: 実行するイメージ</li><li>steps: <ul><li>uses: Githubが公開するアクション。<ul><li>actions/checkoutでこのリポジトリをチェックアウト</li><li>actions/setup-nodeやpeaceiris/actions-gh-pagesもひとまとめにしたコマンド群</li></ul></li><li>run: 実際に実行するコマンド。packages.jsonをnode_modulesを入れるためにnpm/yarn</li></ul></li></ul><p>こう書くと難しいので、</p><pre><code class=\"hljs\"><span class=\"hljs-meta\"># uses: git clone -b (このリポジトリ)</span>\n<span class=\"hljs-meta\"># uses: npmなりyarnをインストール</span>\nyarn  # ここでGatsby-cliが入る\nyarn build  # gatsby buildが呼ばれるはず\n<span class=\"hljs-meta\"># uses: cd public &amp;&amp; git push -b gh-pages</span></code></pre><p><br>runは明示的にコマンドを、usesはコマンドをGithubがいい感じにやってくれるものという認識でいいです。<br>今回は同じ動作を複数の条件で実施したいのでファイル一つで完了できますが、異なる動作をさせる場合は条件ごとにymlファイルを作成しましょう。<br>このように、今回のようにGithubActionのワークフローはymlファイル一つで完結できます。<br><br>動作確認をする場合は、pushを実施するかMicroCMS\bで記事を書けば良いです。<br>なお、MicroCMSのWebhookを実行する場合はGithubトークンを事前に設定しておきましょう。</p><h1 id=\"h222e49d2c8\">復習</h1><p>静的サイトで爆速かつ快適な運営をするためには、</p><ul><li>Javascript: React</li><li>API</li><li>Markup: CMS</li><li>Git<ul><li>Github</li></ul></li><li>CI: GithubAction（今回）</li><li>ホスティングサービス</li></ul><p>の知識が求められます。<br>SEOはもちろんのこと、SPAやPWAはまた別の知識ですが、将来的には必要になります。</p>"},"tags":["GatsbyJS"],"description":"JAMStackなサイトはWordPressの恩恵をすべて捨てるという選択前回の記事まで爆速サイトについて言及しましたが、改めてJAMStackなサイトを作る事とは、動的サイトの恩恵を捨てるという決断である事を再度意識しましょう。たとえば、...","door":null,"prev":"compire_hosting-services","next":null,"updatedAt":"2021年01月20日 05時32分05秒","publishedAt":"2021年01月20日 05時32分05秒"},"next":{"mainId":"privacypolicy","title":"プライバシーポリシー","childConvertHtml":{"convertedHtml":"<p>本サイトのプライバシーポリシーは以下の通り制定しています。</p><h1 id=\"h95c2764706\">運営について</h1><ul><li>本サイトは健全なサイト運営思想に則ります。</li><li>広告はサイト運営費ならびに動画制作費に充当しています。</li><li>本サイトはリンクフリーです。TwitterやInstagramなどSNSでシェアを行う際などの許可や連絡は不要ですが、サイト内のコンテンツと見間違う表現（インラインフレームの使用など）はご遠慮いただきます。</li><li>なお、画像や動画はオリジナルのものについては使用を許可した場合でも直リンクを禁止しています。</li><li>画像や動画など著作物の引用元がある作品は使用許可を許諾元へお問い合わせください。</li></ul><h1 id=\"h15b2720aa5\">広告について</h1><ul><li>本サイトの広告は、Google などの第三者配信事業者が Cookie を使用して、ユーザーがそのウェブサイトや他のウェブサイトに過去にアクセスした際の情報に基づいて広告を配信しています。</li><li>Google が広告 Cookie を使用することにより、ユーザーがそのサイトや他のサイトにアクセスした際の情報に基づいて、Google やそのパートナーが適切な広告をユーザーに表示できるようにしています。</li><li>ユーザーは、<a href=\"https://www.google.com/settings/ads\" target=\"_blank\" rel=\"noopener noreferrer\">広告設定</a> でパーソナライズ広告を無効にできること（または、<a href=\"http://www.aboutads.info/choices/\" target=\"_blank\" rel=\"noopener noreferrer\">www.aboutads.info</a> ） にアクセスすれば、パーソナライズ広告に使われる第三者配信事業者の Cookie を無効にできます。</li><li><span style=\"color:#333333\">本サイトは、Amazon.co.jpを宣伝しリンクすることによってサイトが紹介料を獲得できる手段を提供することを目的に設定されたアフィリエイトプログラムである、Amazonアソシエイト・プログラムの参加者です。</span></li></ul><h1 id=\"hf8ee98d958\">アクセス解析について</h1><ul><li><span style=\"color:#2c2c2f\">当ブログでは、Googleによるアクセス解析ツール「Googleアナリティクス」を利用しています。このGoogleアナリティクスはトラフィックデータの収集のためにクッキー（Cookie）を使用しております。トラフィックデータは匿名で収集されており、個人を特定するものではありません。</span></li></ul><h1 id=\"h9994d708a6\">免責事項</h1><ul><li>本サイトの内容は執筆時点で正確・最新であるように注意して公開していますが、紹介した商品あるいは情報の利用などは自己責任でご利用いただいており、本サイトまたは運営者に帰すべき責任がない事を予め同意いただく事を承知されています。</li></ul><h1 id=\"he05d7d4a86\">著作権について</h1><ul><li>本サイトの内容（文章、画像などすべての著作物）を転載は禁止しています。また、本サイトで引用している情報についても、著作元に許諾を得る必要があります。</li><li>本サイトで引用している情報について、著作権ならびに肖像権などの侵害していると認められる場合はご一報いただけますと、速やかに対処します。</li></ul><h1 id=\"h979ed4ecb1\">LINE友達追加（お問い合わせ）について</h1><ul><li>本サイトではコメントフォームを設けておりません。上記報告や記事などのお問い合わせは、LINEをご利用ください。</li><li>取得したラインアカウント並びに個人情報はいただいたお問い合わせの対応と、サイト運営の通知のみ利用しており、個人的なやり取りには使用しません。</li></ul>"},"tags":["ブログについて"],"description":"本サイトのプライバシーポリシーは以下の通り制定しています。運営について本サイトは健全なサイト運営思想に則ります。広告はサイト運営費ならびに動画制作費に充当しています。本サイトはリンクフリーです。TwitterやInstagramなどSNSで...","door":null,"prev":null,"next":null,"updatedAt":"2021年01月21日 00時13分02秒","publishedAt":"2021年01月21日 00時13分02秒"},"site":{"title":"インターネット老人おぢさん","siteUrl":"https://speedtest-netlify.netlify.app"}}},"staticQueryHashes":["3156519155","370162261"]}