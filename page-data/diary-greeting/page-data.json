{"componentChunkName":"component---src-templates-blog-post-js","path":"/diary-greeting","result":{"pageContext":{"post":{"mainId":"diary-greeting","title":"Gatsby+MicroCMS+NetlifyでJAMStackなブログを運営する","childConvertHtml":{"convertedHtml":"<p>どうもです、のむらやです。<br>タイトルのモチベーションで開設して２日で出来ました。<br>実稼働で15時間ぐらい。集中してやればここまで出来るんだなぁ、と感心しているところです。<br>どちらかというと、記事を書くほうがつらい。ネタはあるんだけど何から書こうか悩んでいます。<br>そんな状態で書いているのでこの記事が一番支離滅裂かもしれない。<br>予めお詫びします。<br></p><h2 id=\"hf664f57031\">ブログ遍歴</h2><p>以前までJekyllとかadiaryとか、サービスだとはてブやらnoteやらQiitaなど、もちろんWordPressとかも使っていたんですが、どれもしっくり来なくて途中でポイッとやってきた経緯があります。<br>格安サーバーを求めて稼働したら、案の定サービスが終了して家なき子になってしまったんですよね。<br>そこそこドメインパワーもあったので使おうと思ったんですが、お名前.comさんは一年経つとドメイン使用量がべらぼうに上がることも多いんで、基本的に一年で捨てて新しいドメインを取る、という事をやっていくと「最初から取らなかったほうが良くね？」という事に気付いてしまうのです。<br>それで現状があるので、完全無料でエンジニアライクな環境でノウハウ蓄積したいなと思いまして、JAMstackにたどり着きました。<br></p><h2 id=\"h80cc118e47\">私のことを少しだけ</h2><p>別の記事で細かい話を書く予定ですが、元々はアフィリエイトもやっている現役エンジニアのIT講師という結構珍しい仕事をしているので、色々な社会のしがらみに縛られずに話せる場所がなかなか限られています。<br>従って、本当に有益な情報（流出すると商売敵など、不特定の業者が困る情報）を発信する場合は予め公開範囲を制限させていただく事になります。<br>最初のうちは小さめに公開範囲を制限しつつ、数が集まれば記事一本全体を制限しつつ、溜まっていけば書籍化（自費）も考えています。<br>資金目的ではないのでクラウドファンディングは見送りましたが、サブスクリプションは興味がありますね。金額とかじゃなくて「お金出してでも買うよ」という人がいてくれると、多少冒険できる心強さがあります。<br>そういう人に向けて書くお話です。コロナ禍の複業に挑戦される方向けに「エンジニアという働き方」「講師という働き方」について語れるのではないかと思っています。<br></p><h2 id=\"hf5dbabf67d\">読者に期待すること</h2><p>Qiita式とかアメブロ式が嫌いなので積極的に広告は出しませんが、メディアには露出しようと思っています。<br>youtubeを始めとした動画配信を頑張ってみたり、動画で話せないやべー話やブログで言えないからメルマガ（LINEとか）にしようとか、そういう計画をなんとなく考えています。<br>話せる内容は全部無料です。お酒飲んで酔った時はここだけの話です。<br><br>そういう「昭和のおっさん感」が伝わる人を対象に書いていくつもりです。<br>若者だからダメとかじゃなく、インターネット老人のおっさんだってまだまだネット社会で頑張っていくぞという事が言いたい。<br>とはいえ、流行りものには疎いので懐古主義にはなります。<br></p><h2 id=\"h1bc47dcf5d\">収益について</h2><p>基本的には広告費と商品紹介、公開制限を掛けている有料記事で考えています。<br>皆さんから（広告費含め）頂いた金額は**誠意として**しっかり公開していきたいですし、何に使ったかもお伝えします。<br>自分の生活費を目的にブログをやるとガッカリしますよ。<br>これは一時期月40万稼いでた事があるから力説しますが、生活のためにブログをやると記事がつまらなくなるんです。<br><br>今度こそ、そうなりたくないので収益は読んでくれているあなたと一緒に、あるいはあなたが楽しめて私も楽しめる「何か」を考えて使いたいなと思っています。<br><br><br>よくあるアフィリエイトブログの「いかがでしょうか」というフレーズが嫌いな私ですが、皆さんのお考えは聞きたいです。<br>次回、あるいは近日どこかでこのブログの使い方やお願いなんかを考えてみようと思います。</p>"},"tags":["ブログについて"],"description":"どうもです、のむらやです。タイトルのモチベーションで開設して２日で出来ました。実稼働で15時間ぐらい。集中してやればここまで出来るんだなぁ、と感心しているところです。どちらかというと、記事を書くほうがつらい。ネタはあるんだけど何から書こうか...","door":null,"prev":null,"next":null,"updatedAt":"2021年01月16日 03時55分35秒","publishedAt":"2021年01月10日 04時54分11秒"},"prev":{"mainId":"school_why","title":"【スクールで教えてくれない】プログラミングの読み解き方・プログラムはなぜ分からない？","childConvertHtml":{"convertedHtml":"<h1 id=\"hce751b1b20\">テキストやカリキュラムを見ながら打ち込んだ、そのコマンドの意味を正しく理解していますか？</h1><p>今日言いたいのはこれです。<br>プログラマーになりたいなら、<strong>間違っても動くコードを教えてくれ</strong>なんて言ったらダメです。<br>コピペで貼り付けたそのコードは、あるいは写経したコマンドはいま本当に動かす必要があるコードなのか、しっかり分析しましょう。<br>関数の振る舞いやコマンドの意味、場合によってはライフサイクルを知る必要があります。<br>Web系のプログラマー（フロントエンド・バックエンド問わず）ならブラウザの挙動や仕様まで事細かに把握しなければなりません。</p><h1 id=\"hef504d916c\">間違いだらけのプログラムのイメージ</h1><p>スクール生に向けて書いているので、ここでは「ブラウザで表示されること」をゴールと設定します。<br>Webサーバー（apacheやらnginxやら）立ち上げて英語書いて保存して表示されたら次へ進む、なんて事をやっていてもスクールに通う意味はありません。<br>テキストに書いてある文字はどういう意味なのかを考え、試行錯誤する必要があります。<br>特に、ブラウザに表示される事を確認するのがゴールなので、JavaなりPHPなりRubyで書いたそのスクリプトが、どうやってブラウザで表示されるhtmlになったのかぐらいは知っておかないとマズいです。<br>この作業はフロントエンドで発生する事が多いですが、スクール生の間では</p><ul><li>HTML: テキストファイルに書いたものが表示される</li><li>JavaなりPHPなりRuby: 表示命令(<code>echo</code> なり<code>print</code> なり)に書いたものが表示される</li></ul><p>というような認識をされているような気がしてなりません。<br><br>HTMLについては極端な話、その理解でもいいですがプログラミング言語やスクリプトについてはその理解ではダメです。<br>そもそも間違っています。<br>確かに<code>echo</code> なりでブラウザに出力できますが、ブラウザが<code>echo</code> を理解しているわけではありません。<br>各言語がコンパイル時に<code>echo</code> の内容をブラウザに理解できるようにしている、というのが正しい考え方です。</p><h1 id=\"h4c9b2d0179\">初心者あるある：プログラムが何をやっているか分からない</h1><p>たとえば、</p><pre><code class=\"hljs\">hoge = 1;\n<span class=\"hljs-builtin-name\">print</span> hoge;\n<span class=\"hljs-builtin-name\">print</span> hoge + 1;\nhoge += 1;\n<span class=\"hljs-builtin-name\">print</span> hoge;</code></pre><p>みたいな内容があったとします。<br><code>print</code> じゃなくて<code>echo</code> だったり、<code>print(hoge)</code> だったり書き方は色々ありますが、ここでは出力を意味します。<br><br>これが何をやっているか分かりますか？という事です。<br><a href=\"https://ferret-plus.com/7102\" target=\"_blank\" rel=\"noopener noreferrer\">フローチャート</a>を使って図にしました。<br><picture><source srcSet=\"https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/%E3%83%95%E3%83%AD%E3%83%BC%E3%83%81%E3%83%A3%E3%83%BC%E3%83%88.webp?w=160&amp;h=90&amp;fm=webp 160w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/%E3%83%95%E3%83%AD%E3%83%BC%E3%83%81%E3%83%A3%E3%83%BC%E3%83%88.webp?w=320&amp;h=180&amp;fm=webp 320w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/%E3%83%95%E3%83%AD%E3%83%BC%E3%83%81%E3%83%A3%E3%83%BC%E3%83%88.webp?w=640&amp;h=360&amp;fm=webp 640w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/%E3%83%95%E3%83%AD%E3%83%BC%E3%83%81%E3%83%A3%E3%83%BC%E3%83%88.webp?w=1280&amp;h=720&amp;fm=webp 1280w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/%E3%83%95%E3%83%AD%E3%83%BC%E3%83%81%E3%83%A3%E3%83%BC%E3%83%88.webp?w=2560&amp;h=1440&amp;fm=webp 2560w\" type=\"image/webp\"><source srcSet=\"https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/%E3%83%95%E3%83%AD%E3%83%BC%E3%83%81%E3%83%A3%E3%83%BC%E3%83%88.webp?w=160&amp;h=90 160w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/%E3%83%95%E3%83%AD%E3%83%BC%E3%83%81%E3%83%A3%E3%83%BC%E3%83%88.webp?w=320&amp;h=180 320w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/%E3%83%95%E3%83%AD%E3%83%BC%E3%83%81%E3%83%A3%E3%83%BC%E3%83%88.webp?w=640&amp;h=360 640w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/%E3%83%95%E3%83%AD%E3%83%BC%E3%83%81%E3%83%A3%E3%83%BC%E3%83%88.webp?w=1280&amp;h=720 1280w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/%E3%83%95%E3%83%AD%E3%83%BC%E3%83%81%E3%83%A3%E3%83%BC%E3%83%88.webp?w=2560&amp;h=1440 2560w\"><img src=\"https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/%E3%83%95%E3%83%AD%E3%83%BC%E3%83%81%E3%83%A3%E3%83%BC%E3%83%88.webp\" alt=\"\" srcset=\"https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/%E3%83%95%E3%83%AD%E3%83%BC%E3%83%81%E3%83%A3%E3%83%BC%E3%83%88.webp?w=160&amp;h=90 160w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/%E3%83%95%E3%83%AD%E3%83%BC%E3%83%81%E3%83%A3%E3%83%BC%E3%83%88.webp?w=320&amp;h=180 320w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/%E3%83%95%E3%83%AD%E3%83%BC%E3%83%81%E3%83%A3%E3%83%BC%E3%83%88.webp?w=640&amp;h=360 640w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/%E3%83%95%E3%83%AD%E3%83%BC%E3%83%81%E3%83%A3%E3%83%BC%E3%83%88.webp?w=1280&amp;h=720 1280w, https://images.microcms-assets.io/protected/ap-northeast-1:45600192-d42c-45d5-a8f8-dad14f377d3c/service/diary/media/%E3%83%95%E3%83%AD%E3%83%BC%E3%83%81%E3%83%A3%E3%83%BC%E3%83%88.webp?w=2560&amp;h=1440 2560w\" sizes=\"80vw\" loading=\"lazy\"></picture><br>このように、プログラムの処理を日本語で書いて意味を理解する事が大事です。<br>どこも<code>echo</code>  とか<code>print</code>  みたいな簡単なものを言語化しますが、たとえば<code>if</code>  や<code>for</code>  でも考え方は一緒です。<br><code>if</code>  と<code>while</code> や<code>switch</code> は（フローチャートで書くと）同じだと理解しますし、<code>for</code>  と<code>do-while</code>  も同じものです。<br>ちょっとレベルを上げると、<code>foreach</code>  や<code>map</code>  なんかもここに該当しますが、このレベルになったらフローチャートなんて面倒くさくていちいち書かないようになります。<br>このように、ワケのわからない文字の羅列を図形に直して理解する事が肝要です。</p><h1 id=\"h15e3804cff\">構文が理解できない</h1><p>引数が一つしかない場合はいいのですが、引数が複数存在するケースがあります（とても多いです）<br>SQLなんかは引数まみれです。</p><pre><code class=\"hljs\"><span class=\"hljs-selector-tag\">create</span> <span class=\"hljs-selector-tag\">database</span> <span class=\"hljs-selector-attr\">[db_name]</span>  # <span class=\"hljs-selector-attr\">[db_name]</span>という名前でデータベースを作る\n<span class=\"hljs-selector-tag\">use</span> <span class=\"hljs-selector-attr\">[db_name]</span>  # <span class=\"hljs-selector-attr\">[db_name]</span>というデータベースを使う。データベースがなければエラーになる</code></pre><p>この辺りはまだいいです。<br>問題は<code>create table</code>  もセットで教える事が多く、これが混乱の元になってしまっている事です。</p><pre><code class=\"hljs\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> [<span class=\"hljs-built_in\">table_name</span>]  # [<span class=\"hljs-built_in\">table_name</span>]という名前でテーブルを作る\n(\n  id <span class=\"hljs-type\">int</span>,  # idという項目を<span class=\"hljs-type\">int</span>属性で作る\n  key <span class=\"hljs-type\">varchar</span>,  # keyという項目を<span class=\"hljs-type\">varchar</span>属性で作る\n   <span class=\"hljs-type\">varchar</span>  # <span class=\"hljs-keyword\">value</span>という項目\n)</code></pre><p>大体の場合、<strong>英語を読めない人を考慮していない</strong> のでこういう問題が起こるわけですが、<strong>英語が読めないと技術・品質の高いプログラムは書けない</strong> ので、スクールにいる内から英語を読む癖をつけておく必要があります。<br>また、SQLではじめて引数を２つ以上入力する場合などは苦手意識ができやすいですが、SQLの問題ではないのでご注意ください。</p><h1 id=\"h63d2863644\">何をやっているか分からないけど動いた</h1><p>これが一番たちが悪いです。<br>とりあえず動いたからもういいや、となるタイミングがどこかで必ずあります。<br>苦手意識が出来てしまったのでもうやりたくない、という気持ちは分かりますがスクールのカリキュラムの単元として取り上げられる事なので、実務でも使う機会は多くなります。<br>その度に苦手意識が出てきてしまうと工数増を招いてしまうため、スクールにいるうちに苦手意識を解消しておいた方がいいです。<br>苦手なことほど、理解した後の自信につながります。</p><h1 id=\"h0a0b03289e\">図形で理解するプログラミングシステム</h1><p>要するにフローチャートの事ですが、システム設計とかその辺りの話になると今度はシステム間連携という、もっとよくわからない規模の話をされます。<br>データをどこに送って、どこに保存して、いつから動き始めるとか複雑な話がいっぱい出てくるんです。<br><a href=\"https://nomuraya.web.app/tech_howto\" target=\"_blank\" rel=\"noopener noreferrer\">参考：このブログが全自動・一部半自動で動いている仕組みを解説</a> <br><br>スクールプログラミングのように書けば正解のものから、動いているが結果や内容が正しいか分からない世界に突入します。<br>主にデータサイエンティストと呼ばれる人たちは、このデータが正しいことあるいは正しそうな根拠を探すという事をやり始めます。<br>動けば正解のプログラミングの世界は簡単だなと、内心で思っている人たちがいてもおかしくはありません（私はそう思ってました）<br><br>この人たちも、頭の中でフローをイメージして運用や試験について考えている事が多いです（私は思っています）</p><h1 id=\"h5aee070fbc\">なぜスクールで教えてくれないのか</h1><p>タイトルを読んで疑問に思った人も多いと思います。<br>なぜなら、フローが分かってもプログラミング言語で言うところの何が該当するのか教えるのが大変だからです。<br>カリキュラムにしたらすごいことになります。<br>また、フローが分かってもシステムは作れないからです。ただし、システムを理解する上でフローチャートは重要な役割を持っています。<br><br>システムの実装だけやれば良いプログラマーならフローチャートのような設計図は必要がない事がほとんどですが、システムの設計を考え始めるとフローチャートは必需品です。<br>パワーポイントで資料を作る際もよくでてきます。<br>ただし、パワーポイントで資料を作る現場SEを私は知らないのですが…。</p>"},"tags":["考察"],"description":"テキストやカリキュラムを見ながら打ち込んだ、そのコマンドの意味を正しく理解していますか？今日言いたいのはこれです。プログラマーになりたいなら、間違っても動くコードを教えてくれなんて言ったらダメです。コピペで貼り付けたそのコードは、あるいは写...","door":null,"prev":null,"next":null,"updatedAt":"2021年01月28日 06時20分99秒","publishedAt":"2021年01月28日 06時20分60秒"},"next":{"mainId":"diary-information","title":"【ご案内】本ブログの見方・使い方","childConvertHtml":{"convertedHtml":"<p>のむらやです。<br>せっかくエンジニアが運営するブログなので、ただ単純に情報を提供する以外に「訪れる楽しみ」のようなものを考えたいなと思っています。<br>インターネット老人おじさんは素人ながらエンターテイナーでもあると自負しているのです。<br></p><h2 id=\"h176349f770\">今出来ている機能</h2><p>過去に対応した事をまとめていきます。<br>項目が多くなりそうなので、更新履歴専用のページを用意するかもしれません。<br></p><h2 id=\"h99eea56ca2\">これからやりたいこと</h2><p>最新版（草案）は[Github Issues](https://github.com/shimajima-eiji/microcms-gatsby/issues)を参照していただくとして、まずはブログとしての最低限の機能から充実させていこうと考えています。<br></p><ul><li>お仕事依頼・お打ち合わせの相談のためのカレンダーフォーム</li><li>匿名・非公開のコメントフォーム（このブログは静的サイトジェネレーターで作っているので、WordPressのようなノリでコメントフォームを作れません）</li><li>目次</li><li>国際化（英語）</li><li>SNS投稿のテンプレートを充実</li><li>ブログ内検索（これもWordPressの感覚で作れません）</li></ul><p><br>将来的にやりたい事はまだまだありますが、優先度が高いのはこの辺りです。<br></p>"},"tags":["ブログについて"],"description":"のむらやです。せっかくエンジニアが運営するブログなので、ただ単純に情報を提供する以外に「訪れる楽しみ」のようなものを考えたいなと思っています。インターネット老人おじさんは素人ながらエンターテイナーでもあると自負しているのです。今出来ている機...","door":null,"prev":null,"next":null,"updatedAt":"2021年01月16日 04時21分20秒","publishedAt":"2021年01月10日 04時55分33秒"},"site":{"title":"インターネット老人おぢさん","siteUrl":"https://speedtest-netlify.netlify.app"}}},"staticQueryHashes":["3156519155","370162261"]}