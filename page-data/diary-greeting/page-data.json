{"componentChunkName":"component---src-templates-blog-post-js","path":"/diary-greeting","result":{"pageContext":{"post":{"mainId":"diary-greeting","title":"Gatsby+MicroCMS+NetlifyでJAMStackなブログを運営する","childConvertHtml":{"convertedHtml":"<p>どうもです、のむらやです。<br>タイトルのモチベーションで開設して２日で出来ました。<br>実稼働で15時間ぐらい。集中してやればここまで出来るんだなぁ、と感心しているところです。<br>どちらかというと、記事を書くほうがつらい。ネタはあるんだけど何から書こうか悩んでいます。<br>そんな状態で書いているのでこの記事が一番支離滅裂かもしれない。<br>予めお詫びします。<br></p><h2 id=\"hf664f57031\">ブログ遍歴</h2><p>以前までJekyllとかadiaryとか、サービスだとはてブやらnoteやらQiitaなど、もちろんWordPressとかも使っていたんですが、どれもしっくり来なくて途中でポイッとやってきた経緯があります。<br>格安サーバーを求めて稼働したら、案の定サービスが終了して家なき子になってしまったんですよね。<br>そこそこドメインパワーもあったので使おうと思ったんですが、お名前.comさんは一年経つとドメイン使用量がべらぼうに上がることも多いんで、基本的に一年で捨てて新しいドメインを取る、という事をやっていくと「最初から取らなかったほうが良くね？」という事に気付いてしまうのです。<br>それで現状があるので、完全無料でエンジニアライクな環境でノウハウ蓄積したいなと思いまして、JAMstackにたどり着きました。<br></p><h2 id=\"h80cc118e47\">私のことを少しだけ</h2><p>別の記事で細かい話を書く予定ですが、元々はアフィリエイトもやっている現役エンジニアのIT講師という結構珍しい仕事をしているので、色々な社会のしがらみに縛られずに話せる場所がなかなか限られています。<br>従って、本当に有益な情報（流出すると商売敵など、不特定の業者が困る情報）を発信する場合は予め公開範囲を制限させていただく事になります。<br>最初のうちは小さめに公開範囲を制限しつつ、数が集まれば記事一本全体を制限しつつ、溜まっていけば書籍化（自費）も考えています。<br>資金目的ではないのでクラウドファンディングは見送りましたが、サブスクリプションは興味がありますね。金額とかじゃなくて「お金出してでも買うよ」という人がいてくれると、多少冒険できる心強さがあります。<br>そういう人に向けて書くお話です。コロナ禍の複業に挑戦される方向けに「エンジニアという働き方」「講師という働き方」について語れるのではないかと思っています。<br></p><h2 id=\"hf5dbabf67d\">読者に期待すること</h2><p>Qiita式とかアメブロ式が嫌いなので積極的に広告は出しませんが、メディアには露出しようと思っています。<br>youtubeを始めとした動画配信を頑張ってみたり、動画で話せないやべー話やブログで言えないからメルマガ（LINEとか）にしようとか、そういう計画をなんとなく考えています。<br>話せる内容は全部無料です。お酒飲んで酔った時はここだけの話です。<br><br>そういう「昭和のおっさん感」が伝わる人を対象に書いていくつもりです。<br>若者だからダメとかじゃなく、インターネット老人のおっさんだってまだまだネット社会で頑張っていくぞという事が言いたい。<br>とはいえ、流行りものには疎いので懐古主義にはなります。<br></p><h2 id=\"h1bc47dcf5d\">収益について</h2><p>基本的には広告費と商品紹介、公開制限を掛けている有料記事で考えています。<br>皆さんから（広告費含め）頂いた金額は**誠意として**しっかり公開していきたいですし、何に使ったかもお伝えします。<br>自分の生活費を目的にブログをやるとガッカリしますよ。<br>これは一時期月40万稼いでた事があるから力説しますが、生活のためにブログをやると記事がつまらなくなるんです。<br><br>今度こそ、そうなりたくないので収益は読んでくれているあなたと一緒に、あるいはあなたが楽しめて私も楽しめる「何か」を考えて使いたいなと思っています。<br><br><br>よくあるアフィリエイトブログの「いかがでしょうか」というフレーズが嫌いな私ですが、皆さんのお考えは聞きたいです。<br>次回、あるいは近日どこかでこのブログの使い方やお願いなんかを考えてみようと思います。</p>"},"tags":["ブログについて"],"description":"どうもです、のむらやです。タイトルのモチベーションで開設して２日で出来ました。実稼働で15時間ぐらい。集中してやればここまで出来るんだなぁ、と感心しているところです。どちらかというと、記事を書くほうがつらい。ネタはあるんだけど何から書こうか...","door":null,"prev":null,"next":null,"updatedAt":"2021年01月16日 03時55分35秒","publishedAt":"2021年01月10日 04時54分11秒"},"prev":{"mainId":"autobuild","title":"MicroCMSを使ったJAMStackなサイトで記事を書くたびに自動更新させたいならCIツールを使おう！（GithubAction編）","childConvertHtml":{"convertedHtml":"<h1 id=\"h3301096c4c\">JAMStackなサイトはWordPressの恩恵をすべて捨てるという選択</h1><p>前回の記事まで爆速サイトについて言及しましたが、改めてJAMStackなサイトを作る事とは、動的サイトの恩恵を捨てるという決断である事を再度意識しましょう。<br>たとえば、</p><ul><li>記事を書いたら自動的にアップロードされる</li><li>ブログ内検索ができる</li><li>前のページ、次のページなどナビゲーションリンク</li><li>記事のタイトルとページタイトルを一致させる</li></ul><p>といったケースが考えられます。<br>アフィリエイターにとっては一番最後など致命的以外の何物でもないです。<br>その他細かいものは多くありますが、インパクトの大きいものはこの辺りでしょうか。</p><h2 id=\"h32f741980e\">復習：内部マークダウンと外部CMS</h2><p>内部マークダウンはいわゆるMarkdownファイルです。外部CMSは今回の場合、MicroCMSを指します。<br>MicroCMSについてはお話した通りですが、ここではGithubのようなWebサービスを使うメリットに注目しましょう。<br>MicroCMSのポイントは</p><ul><li>どこからでも</li><li>PCでもスマホでも</li><li>記事を書いたら即反映</li></ul><p>です。<br>実はこの要件を満たすだけなら、Githubにさえ繋げれば記事を更新できます。<br>かつ、MicroCMSと違うのは、<strong>GatsbyJSのプラグインをフルスペック</strong>に使えるということです。<br>前回の記事で「MicroCMSを使いたい理由に</p><ul><li>画面プレビューができる<ul><li>ビルドをしなくても記事を確認できる</li></ul></li><li>どこからでも記事が書ける（重複ですね）</li></ul><p>を上げていました。<br>そして、デメリットとして<code>gatsby-transform-remark</code> が使えない事を上げています。<br>gatsby-transform-remarkはマークダウンを強力にサポートするプラグインで、Gatsbyの良さの半分はこれのおかげだと言ってもいいです。<br>MicroCMS推しの私ですら羨望の眼差しで見ています。<br><br>前回ウェブフォントが遅いという話をしましたが、この問題も解決するでしょう。<br>本当の意味で速度を追求するなら、ベストはホスティングサービス議論よりデータソースをローカルに持たせて制御する以上の事はないですが、マークダウンは癖が強いのでエンジニアやライター以外にはとっつきにくい印象を与えてしまうでしょう。<br>MicroCMSではリッチテキストエディタがあるので、従来のブログライターにも扱いやすいというメリットがあります（私はマークダウンで変換しているので特にありません…）<br>Githubと言い続けていますが、GitLabでも同じことが出来ます。</p><h2 id=\"hcad30e4a70\">記事を書いても更新されない</h2><p>当たり前ですが、JAMStack構成では記事を書いても即反映されません。<br>動的にページが生成されるWordPressと違って、静的なページは新しいページを自分で作る必要がある、という事です。<br>つまり、記事を書いたら再度ビルドする必要があります。<br><br>とはいえ、記事を更新するたびにビルドをするのは面倒です。<br>ビルドを自動化して最新のページを反映させるための仕組みを作るのがCIツールの存在です。</p><h3 id=\"h9ff6a85ae5\">CIツールとは</h3><p>Continuous Integration：継続的インテグレーションと呼ぶ事が多いですが、ここではGithubにpushしたり記事を更新したら自動でビルドしてくれるステキな仕組み、という認識で良いです。<br>CIツールも色々ありますが、今回はGithubActionを使います。</p><h2 id=\"h4019f5ecd1\">GithubActionを使う</h2><p><a href=\"https://docs.github.com/ja/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions\" target=\"_blank\" rel=\"noopener noreferrer\">公式の解説サイト</a> で全部書いているんですが、情報が多すぎるので必要なものだけ抽出します。<br>Gatsbyなどで作ったプロジェクトのルートディレクトリで<code>.github/workflows/○○.yml</code>  でファイルを作ります。<br>ファイル名は何でも良いです。<br>これがGithubActionで実行されるワークフローです。<br><a href=\"https://github.com/shimajima-eiji/Gatsby-MicroCMS-Firebase_Diary/blob/main/.github/workflows/firebase-hosting-merge.yml\" target=\"_blank\" rel=\"noopener noreferrer\">全文</a><br>ここではピンポイントに解説します。</p><h3 id=\"h12a8b44390\">動作条件を指定する：ON句</h3><pre><code class=\"hljs\"><span class=\"hljs-built_in\">name</span>: Deploy <span class=\"hljs-keyword\">to</span> Firebase Hosting <span class=\"hljs-keyword\">on</span> merge\n\t<span class=\"hljs-keyword\">on</span>:\n\t  push:\n\t    branches:\n\t      - main\n\t  repository_dispatch:\n          - types: [MicroCMS_update]</code></pre><p><br></p><ul><li>pushをトリガーにするケース<ul><li>サイトレイアウトを変更した際に動いてほしい</li><li>mainブランチをターゲット</li></ul></li><li>MicroCMSをトリガーにするケース<ul><li>記事更新時にビルドしたい</li><li><span style=\"color:#cf3e51\">MicroCMS_update(任意)のタイプを実行</span></li></ul></li></ul><p>ここはMicroCMSの仕様です。<br><a href=\"https://microcms.io/blog/webhook-for-github-actions/\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub ActionsへのWebhook通知に対応しました（MicroCMS公式）</a></p><h3 id=\"h66d1bed60b\">jobs句</h3><pre><code class=\"hljs\"><span class=\"hljs-attribute\">jobs</span>:\n  (name):\n    <span class=\"hljs-attribute\">runs-on</span>: ubuntu-latest\n    <span class=\"hljs-attribute\">steps</span>:\n    - <span class=\"hljs-attribute\">uses</span>: actions/checkout<span class=\"hljs-variable\">@v2</span>\n    - <span class=\"hljs-attribute\">uses</span>: actions/setup-node<span class=\"hljs-variable\">@v1</span>\n    - <span class=\"hljs-attribute\">run</span>: | \n        yarn\n        yarn build\n    - <span class=\"hljs-attribute\">uses</span>: preceiris/actions-gh-pages<span class=\"hljs-variable\">@v3</span>  # Github Pagesで表示させる\n    </code></pre><p>ジョブ名以下に処理体系をひとかたまりでまとめています。</p><ul><li>runs-on: 実行するイメージ</li><li>steps: <ul><li>uses: Githubが公開するアクション。<ul><li>actions/checkoutでこのリポジトリをチェックアウト</li><li>actions/setup-nodeやpeaceiris/actions-gh-pagesもひとまとめにしたコマンド群</li></ul></li><li>run: 実際に実行するコマンド。packages.jsonをnode_modulesを入れるためにnpm/yarn</li></ul></li></ul><p>こう書くと難しいので、</p><pre><code class=\"hljs\"><span class=\"hljs-meta\"># uses: git clone -b (このリポジトリ)</span>\n<span class=\"hljs-meta\"># uses: npmなりyarnをインストール</span>\nyarn  # ここでGatsby-cliが入る\nyarn build  # gatsby buildが呼ばれるはず\n<span class=\"hljs-meta\"># uses: cd public &amp;&amp; git push -b gh-pages</span></code></pre><p><br>runは明示的にコマンドを、usesはコマンドをGithubがいい感じにやってくれるものという認識でいいです。<br>今回は同じ動作を複数の条件で実施したいのでファイル一つで完了できますが、異なる動作をさせる場合は条件ごとにymlファイルを作成しましょう。<br>このように、今回のようにGithubActionのワークフローはymlファイル一つで完結できます。<br><br>動作確認をする場合は、pushを実施するかMicroCMS\bで記事を書けば良いです。<br>なお、MicroCMSのWebhookを実行する場合はGithubトークンを事前に設定しておきましょう。</p><h1 id=\"h222e49d2c8\">復習</h1><p>静的サイトで爆速かつ快適な運営をするためには、</p><ul><li>Javascript: React</li><li>API</li><li>Markup: CMS</li><li>Git<ul><li>Github</li></ul></li><li>CI: GithubAction（今回）</li><li>ホスティングサービス</li></ul><p>の知識が求められます。<br>SEOはもちろんのこと、SPAやPWAはまた別の知識ですが、将来的には必要になります。</p>"},"tags":["GatsbyJS"],"description":"JAMStackなサイトはWordPressの恩恵をすべて捨てるという選択前回の記事まで爆速サイトについて言及しましたが、改めてJAMStackなサイトを作る事とは、動的サイトの恩恵を捨てるという決断である事を再度意識しましょう。たとえば、...","door":null,"prev":"compire_hosting-services","next":null,"updatedAt":"2021年01月20日 05時32分05秒","publishedAt":"2021年01月20日 05時32分05秒"},"next":{"mainId":"diary-information","title":"【ご案内】本ブログの見方・使い方","childConvertHtml":{"convertedHtml":"<p>のむらやです。<br>せっかくエンジニアが運営するブログなので、ただ単純に情報を提供する以外に「訪れる楽しみ」のようなものを考えたいなと思っています。<br>インターネット老人おじさんは素人ながらエンターテイナーでもあると自負しているのです。<br></p><h2 id=\"h176349f770\">今出来ている機能</h2><p>過去に対応した事をまとめていきます。<br>項目が多くなりそうなので、更新履歴専用のページを用意するかもしれません。<br></p><h2 id=\"h99eea56ca2\">これからやりたいこと</h2><p>最新版（草案）は[Github Issues](https://github.com/shimajima-eiji/microcms-gatsby/issues)を参照していただくとして、まずはブログとしての最低限の機能から充実させていこうと考えています。<br></p><ul><li>お仕事依頼・お打ち合わせの相談のためのカレンダーフォーム</li><li>匿名・非公開のコメントフォーム（このブログは静的サイトジェネレーターで作っているので、WordPressのようなノリでコメントフォームを作れません）</li><li>目次</li><li>国際化（英語）</li><li>SNS投稿のテンプレートを充実</li><li>ブログ内検索（これもWordPressの感覚で作れません）</li></ul><p><br>将来的にやりたい事はまだまだありますが、優先度が高いのはこの辺りです。<br></p>"},"tags":["ブログについて"],"description":"のむらやです。せっかくエンジニアが運営するブログなので、ただ単純に情報を提供する以外に「訪れる楽しみ」のようなものを考えたいなと思っています。インターネット老人おじさんは素人ながらエンターテイナーでもあると自負しているのです。今出来ている機...","door":null,"prev":null,"next":null,"updatedAt":"2021年01月16日 04時21分20秒","publishedAt":"2021年01月10日 04時55分33秒"},"site":{"title":"インターネット老人おぢさん","siteUrl":"https://speedtest-netlify.netlify.app"}}},"staticQueryHashes":["3156519155","370162261"]}